---
description: Tailwind CSS utility classes, dark mode, and responsive design patterns
globs:
  - **/*.tsx
  - **/*.css
alwaysApply: false
---

# Tailwind CSS Styling

## Utility Classes

- Prefer Tailwind utility classes over custom CSS
- Use utility classes for layout, spacing, typography, colors
- Combine utilities for complex styles
- Use `cn()` utility from `@/lib/utils` for conditional classes

## Dark Mode

- Support dark mode using `dark:` variant
- Use CSS variables for theming (defined in globals.css)
- Test components in both light and dark modes
- Use semantic color tokens: `bg-background`, `text-foreground`, `bg-primary`, etc.

```typescript
className="bg-background text-foreground dark:bg-background dark:text-foreground"
```

## Responsive Design

- Use responsive breakpoints: `sm:`, `md:`, `lg:`, `xl:`, `2xl:`
- Mobile-first approach: base styles for mobile, add breakpoints for larger screens
- Use responsive utilities for layout, spacing, typography

```typescript
className="w-full md:w-1/2 lg:w-1/3"
className="p-4 md:p-6 lg:p-8"
```

## Layout Patterns

- Use Flexbox utilities: `flex`, `items-center`, `justify-between`, `gap-*`
- Use Grid utilities: `grid`, `grid-cols-*`, `grid-rows-*`
- Use container queries when appropriate
- Use `min-h-screen` for full-height layouts

## Spacing

- Use consistent spacing scale: `p-*`, `m-*`, `gap-*`, `space-*`
- Common spacing: `p-4`, `p-6`, `p-8` for padding
- Use `gap-*` for flex/grid spacing
- Use `space-y-*` or `space-x-*` for child spacing

## Typography

- Use semantic text utilities: `text-sm`, `text-base`, `text-lg`, `text-xl`, `text-2xl`, `text-3xl`
- Use font weight: `font-normal`, `font-medium`, `font-semibold`, `font-bold`
- Use `text-muted-foreground` for secondary text
- Use `leading-*` for line height

## Colors

- Use semantic color tokens from CSS variables:
  - `bg-background`, `text-foreground`
  - `bg-primary`, `text-primary-foreground`
  - `bg-secondary`, `text-secondary-foreground`
  - `bg-muted`, `text-muted-foreground`
  - `bg-destructive`, `text-destructive`
  - `bg-accent`, `text-accent-foreground`
- Avoid hardcoded colors; use theme tokens

## Borders and Shadows

- Use `border` for borders
- Use `rounded-md`, `rounded-lg` for border radius
- Use `shadow-xs`, `shadow-sm`, `shadow-md` for shadows
- Use `border-input` for input borders

## Component Styling

- Use Tailwind classes in component className props
- Use `cn()` utility for conditional and merged classes
- Keep styles co-located with components
- Extract repeated patterns into component variants (CVA)

## Examples

```typescript
// Layout
<div className="min-h-screen bg-background">
  <div className="container mx-auto px-4 py-8">
    <div className="flex items-center justify-between gap-4">
      {/* content */}
    </div>
  </div>
</div>

// Cards
<div className="rounded-lg border bg-card p-6 shadow-sm">
  <h2 className="text-2xl font-bold">Title</h2>
  <p className="text-muted-foreground">Description</p>
</div>

// Forms
<input className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm" />

// Conditional classes
<button className={cn(
  "px-4 py-2 rounded-md",
  isActive && "bg-primary text-primary-foreground",
  !isActive && "bg-secondary text-secondary-foreground"
)} />
```

## Best Practices

- Prefer composition over custom CSS
- Use semantic HTML elements with appropriate Tailwind classes
- Keep utility combinations readable
- Use responsive utilities for mobile-first design
- Test dark mode appearance
- Use consistent spacing scale throughout the app
